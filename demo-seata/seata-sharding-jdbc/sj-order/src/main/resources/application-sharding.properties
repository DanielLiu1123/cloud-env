# sharding-jdbc配置
# sharding-jdbc数据源配置
spring.shardingsphere.datasource.names=ds1,ds2

spring.shardingsphere.datasource.ds1.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.ds1.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.ds1.jdbc-url=jdbc:mysql://127.0.0.1:3307/seata_sharding_jdbc_1?serverTimezone=Asia/Shanghai&characterEncoding=utf8
spring.shardingsphere.datasource.ds1.username=root
spring.shardingsphere.datasource.ds1.password=llw1123

spring.shardingsphere.datasource.ds2.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.ds2.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.ds2.jdbc-url=jdbc:mysql://127.0.0.1:3307/seata_sharding_jdbc_2?serverTimezone=Asia/Shanghai&characterEncoding=utf8
spring.shardingsphere.datasource.ds2.username=root
spring.shardingsphere.datasource.ds2.password=llw1123

# sharding-jdbc分片配置
# 分片策略, id为奇数, 在奇数库奇数表
spring.shardingsphere.sharding.tables.order.actual-data-nodes=ds$->{1..2}.order_$->{1..2}
spring.shardingsphere.sharding.tables.order.key-generator.column=id
spring.shardingsphere.sharding.tables.order.key-generator.type=SNOWFLAKE
spring.shardingsphere.sharding.tables.order.database-strategy.inline.sharding-column=id
spring.shardingsphere.sharding.tables.order.database-strategy.inline.algorithm-expression=ds$->{(Long.parseLong(id) + 1) % 2 + 1}
spring.shardingsphere.sharding.tables.order.table-strategy.inline.sharding-column=id
spring.shardingsphere.sharding.tables.order.table-strategy.inline.algorithm-expression=order_$->{(Long.parseLong(id) + 1) % 2 + 1}

#sharding-jdbc显示最终SQL
spring.shardingsphere.props.sql.show=true
spring.main.allow-bean-definition-overriding=true
#logging.level.io.seata=debug